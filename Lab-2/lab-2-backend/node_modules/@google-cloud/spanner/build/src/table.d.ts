/*!
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ServiceError } from 'grpc';
import { Operation as GaxOperation } from 'google-gax';
import { Json } from './codec';
import { Database } from './database';
import { SpannerClient as s } from './v1';
import { PartialResultStream, Row } from './partial-result-stream';
import { ReadRequest, TimestampBounds } from './transaction';
import { google as databaseAdmin } from '../proto/spanner_database_admin';
import { Schema, ResourceCallback } from './common';
export declare type Key = string | string[];
declare type CommitPromise = Promise<[s.CommitResponse]>;
export declare type CreateTableResponse = [Table, GaxOperation, databaseAdmin.longrunning.IOperation];
declare type DropTablePromise = Promise<[GaxOperation, databaseAdmin.longrunning.IOperation]>;
declare type ReadPromise = Promise<[Array<Row | Json>]>;
export interface CreateTableCallback {
    (err?: ServiceError | null, table?: Table | null, operation?: GaxOperation | null, apiResponse?: databaseAdmin.longrunning.IOperation | null): void;
}
declare type DropTableCallback = ResourceCallback<GaxOperation, databaseAdmin.longrunning.IOperation>;
interface ReadCallback {
    (err: ServiceError, rows?: null): void;
    (err: null, rows: Array<Row | Json>): void;
}
/**
 * Create a Table object to interact with a table in a Cloud Spanner
 * database.
 *
 * @class
 *
 * @param {Database} database {@link Database} instance.
 * @param {string} name Name of the table.
 *
 * @example
 * const {Spanner} = require('@google-cloud/spanner');
 * const spanner = new Spanner();
 *
 * const instance = spanner.instance('my-instance');
 * const database = instance.database('my-database');
 * const table = database.table('my-table');
 */
declare class Table {
    database: Database;
    name: string;
    constructor(database: Database, name: string);
    create(schema: Schema): Promise<CreateTableResponse>;
    create(schema: Schema, callback: CreateTableCallback): void;
    /**
     * Create a readable object stream to receive rows from the database using key
     * lookups and scans.
     *
     * @see [StreamingRead API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.Spanner.StreamingRead)
     * @see [ReadRequest API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.ReadRequest)
     *
     * @param {ReadRequest} query Configuration object. See official
     *     [`ReadRequest`](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.ReadRequest).
     *     API documentation.
     * @param {TimestampBounds} [options] [Transaction options](https://cloud.google.com/spanner/docs/timestamp-bounds).
     * @returns {ReadableStream}
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     * const database = instance.database('my-database');
     * const table = database.table('Singers');
     *
     * table.createReadStream({
     *     keys: ['1'],
     *     columns: ['SingerId', 'name']
     *   })
     *   .on('error', function(err) {})
     *   .on('data', function(row) {
     *     // row = {
     *     //   SingerId: '1',
     *     //   Name: 'Eddie Wilson'
     *     // }
     *   })
     *   .on('end', function() {
     *     // All results retrieved.
     *   });
     *
     * //-
     * // Provide an array for `query.keys` to read with a composite key.
     * //-
     * const query = {
     *   keys: [
     *     [
     *       'Id1',
     *       'Name1'
     *     ],
     *     [
     *       'Id2',
     *       'Name2'
     *     ]
     *   ],
     *   // ...
     * };
     *
     * //-
     * // If you anticipate many results, you can end a stream early to prevent
     * // unnecessary processing and API requests.
     * //-
     * table.createReadStream({
     *     keys: ['1'],
     *     columns: ['SingerId', 'name']
     *   })
     *   .on('data', function(row) {
     *     this.end();
     *   });
     */
    createReadStream(request: ReadRequest, options?: TimestampBounds): PartialResultStream;
    delete(): DropTablePromise;
    delete(callback: DropTableCallback): void;
    deleteRows(keys: Key[]): CommitPromise;
    deleteRows(keys: Key[], callback: s.CommitCallback): void;
    drop(): DropTablePromise;
    drop(callback: DropTableCallback): void;
    insert(rows: object | object[]): CommitPromise;
    insert(rows: object | object[], callback: s.CommitCallback): void;
    read(request: ReadRequest, options?: TimestampBounds): ReadPromise;
    read(request: ReadRequest, callback: ReadCallback): void;
    read(request: ReadRequest, options: TimestampBounds, callback: ReadCallback): void;
    replace(rows: object | object[]): CommitPromise;
    replace(rows: object | object[], callback: s.CommitCallback): void;
    update(rows: object | object[]): CommitPromise;
    update(rows: object | object[], callback: s.CommitCallback): void;
    upsert(rows: object | object[]): CommitPromise;
    upsert(rows: object | object[], callback: s.CommitCallback): void;
    /**
     * Creates a new transaction and applies the desired mutation via
     * {@link Transaction#commit}.
     *
     * @see [Commit API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.Spanner.Commit)
     *
     * @private
     *
     * @param {string} method CRUD method (insert, update, etc.).
     * @param {object|object[]} rows A map of names to values of data to insert
     *     into this table.
     * @param {function} callback The callback function.
     */
    private _mutate;
}
/**
 * Reference to the {@link Table} class.
 * @name module:@google-cloud/spanner.Table
 * @see Table
 */
export { Table };
